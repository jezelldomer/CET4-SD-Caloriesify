/* * Copyright (c) 2020 Ruslan Potekhin */package com.feedapp.app.data.models.localdbimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport com.feedapp.app.data.databases.daos.LocalProductDaoimport kotlinx.coroutines.*class LocalFoodDelegate<T : IProduct>(private val dao: LocalProductDao<T>) : ILocalProductRepository {    private val _products = MutableLiveData<List<IProduct>>()    override val products: LiveData<List<IProduct>> get() = _products    override fun searchByQuery(query: String) = CoroutineScope(Dispatchers.IO).launch {        _products.postValue(dao.searchByName(query))    }    fun searchById(id: Int) = dao.searchById(id)    override suspend fun getSearchSuggestions(query: String): List<String> = coroutineScope {        val queryRefactored = query.replace(" ".toRegex(), "")        var list = dao.searchBySuggestion(queryRefactored)            ?.sortedWith(compareBy { it.length })        val size = list?.size        size?.let {            // if bigger than 5, sublist it            if (size > 5) {                list = list?.subList(0, 5)            }        }        list ?: listOf()    }}interface ILocalProductRepository {    fun searchByQuery(query: String): Job    val products: LiveData<List<IProduct>>    suspend fun getSearchSuggestions(query: String): List<String>}