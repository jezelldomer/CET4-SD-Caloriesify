/* * Copyright (c) 2020 Ruslan Potekhin */package com.feedapp.app.data.repositoriesimport androidx.lifecycle.LiveDataimport com.feedapp.app.data.databases.daos.RecentDaoimport com.feedapp.app.data.models.RecentProductimport kotlinx.coroutines.coroutineScopeimport javax.inject.Injectclass RecentDelegate @Inject constructor(private val recentDao: RecentDao) {    companion object{        const val MAX_RECENT_NUMBER = 10    }    val recentProducts: LiveData<List<RecentProduct>> = recentDao.getRecentProducts(MAX_RECENT_NUMBER)    /**     * save product to recent     */    fun saveToRecent(recent: RecentProduct) {        // if rows too much, delete first        if (recentDao.getNumRecent() >= MAX_RECENT_NUMBER) {            recentDao.deleteFirstRecent()        }        recentDao.insertRecentProducts(recent)    }    suspend fun deleteRecentProducts() = coroutineScope {        recentDao.deleteRecentProducts()    }}