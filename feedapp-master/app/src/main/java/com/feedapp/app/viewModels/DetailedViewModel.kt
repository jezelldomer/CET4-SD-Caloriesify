/* * Copyright (c) 2020 Ruslan Potekhin */package com.feedapp.app.viewModelsimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.feedapp.app.data.models.FoodProductimport com.feedapp.app.data.models.RecentProductimport com.feedapp.app.data.models.day.DayDateimport com.feedapp.app.data.models.localdb.IProductimport com.feedapp.app.data.repositories.DayRepositoryimport com.feedapp.app.data.repositories.RecentDelegateimport com.feedapp.app.data.repositories.SearchFoodRepositoryimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport javax.inject.Injectclass DetailedViewModel @Inject constructor(    private val searchRepository: SearchFoodRepository,    private val dayRepository: DayRepository,    private val recentDelegate: RecentDelegate) : ViewModel() {    val multiplier: LiveData<Double> get() = _multiplier    private val _multiplier = MutableLiveData(1.0)    // 0 - grams' position in array of list by default    private val multiplierPosition = searchRepository.multiplierPosition    val foodInfo: LiveData<FoodProduct> = searchRepository.foodInfo    private val _localFoodInfo = MutableLiveData<IProduct>()    val localFoodInfo: LiveData<IProduct> get() = _localFoodInfo    val usingLocal: MutableLiveData<Boolean> = MutableLiveData(false)    /**     * search product in offline DB     */    fun searchFoodProduct(id: Int) {        searchRepository.searchFoodProduct(id)    }    fun setLocalProductInfo(product: IProduct) {        _localFoodInfo.value = product    }    fun isMultiplierValueValid(text: String): Boolean {        return !(text.toDouble() > 100 && (multiplierPosition.value != 0))    }    fun saveWithoutRecent(        dateString: DayDate?,        mealType: Int?,        grams: Float,        product: IProduct?    ) =        viewModelScope.launch(Dispatchers.IO) {            if (dateString == null || mealType == null) return@launch            // save to consumed Products to the specific date            dayRepository.saveSearchProductToDay(                dateString,                mealType,                foodInfo.value,                grams,                product            )        }    fun saveConsumedFoodToDB(        dateString: DayDate?,        mealType: Int?,        grams: Float,        product: IProduct?    ) =        viewModelScope.launch(Dispatchers.IO) {            if (dateString == null || mealType == null) return@launch            // save to consumed Products to the specific date            dayRepository.saveSearchProductToDay(                dateString,                mealType,                foodInfo.value,                grams,                product            )            // save to recent products            foodInfo.value?.let {                val recentProduct = RecentProduct(name = it.name, foodProductId = it.id)                recentDelegate.saveToRecent(recentProduct)            } ?: product?.let {                val recentProduct = RecentProduct(name = it.name, foodProductId = it.id)                recentDelegate.saveToRecent(recentProduct)            }        }    fun changeMultiplierValue(d: Double) = _multiplier.postValue(d)}