/* * Copyright (c) 2020 Ruslan Potekhin */package com.feedapp.app.ui.viewclassesimport android.content.Contextimport android.util.AttributeSetimport android.widget.LinearLayoutimport androidx.core.view.childrenimport androidx.core.view.forEachIndexedclass WaterContainer(context: Context, attributeSet: AttributeSet) :    LinearLayout(context, attributeSet) {    // callback for setting water number in day    var waterModifier: WaterModifier? = null    override fun onAttachedToWindow() {        super.onAttachedToWindow()        setViewListeners()    }    private fun setViewListeners() {        this@WaterContainer.children.iterator().forEach { view ->            if (view is LottieWaterView) {                view.setOnClickListener {                    if (view.progress == 0f) {                        view.playAnimation()                        markPrecedingViews(view, true)                    }                    // reset animation                    else if (view.isAnimationOver()) {                        view.progress = 0f                        markPrecedingViews(view, false)                    }                }            }        }    }    /**     * find current view's index in [WaterContainer]     */    private fun markPrecedingViews(lottieWaterView: LottieWaterView, fill: Boolean) {        var i = -1        this.children.iterator().asSequence()            .forEachIndexed { index, view -> if (view == lottieWaterView) i = index }        if (i >= 0) {            checkPrecedingViews(i, fill)        }    }    /**     * iterates through all views and fills preceding views or resets following views     */    private fun checkPrecedingViews(i: Int, fill: Boolean) {        this.forEachIndexed { index, view ->            if (view is LottieWaterView) {                // if to fill, fill all preceding and the view that has been clicked on                if (fill) {                    if (index <= i && !view.isAnimationOver()) {                        view.fill()                        waterModifier?.setWater(i + 1)                    }                }                // otherwise, reset all following including the clicked one                else if (index >= i) {                    view.reset()                    waterModifier?.setWater(i)                }            }        }    }    /**     * return number of "empty" views ([LottieWaterView])     */    private fun getCurrentFullWaterGlasses(): Int {        var a = 0        this.children.asSequence().forEachIndexed { _, view ->            if (view is LottieWaterView) {                if (!view.canFill()) a++            }        }        return a    }    /**     * "fills" views til specific number, other resets     */    fun fillWaterGlassViews(waterNum: Int) {        if (waterNum == getCurrentFullWaterGlasses()) return        this.children.iterator()            .asSequence().forEachIndexed { index, view ->                if (view is LottieWaterView) {                    if (index < waterNum) view.fillWater()                    else view.reset()                }            }    }}